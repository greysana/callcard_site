import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { connectToDatabase } from "@/lib/mongodb";
import User from "../../../models/User";
import { generateToken } from "../../../lib/jwt";
import bcrypt from "bcryptjs";

export default NextAuth({
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        // Connect to the database
        await connectToDatabase();

        // Check if the credentials are provided
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Email and password are required.");
        }

        // Find the user in the database
        const user = await User.findOne({ email: credentials.email });

        if (!user) {
          return null; // Invalid user
        }

        // Compare the provided password with the hashed password in the database
        const isMatch = await bcrypt.compare(
          credentials.password,
          user.password
        );

        if (!isMatch) {
          return null; // Invalid password
        }

        // Generate a JWT token for the user
        const token = generateToken(user._id.toString());

        // Return user object along with the token (which will be saved in the session)
        return { id: user._id, email: user.email, token };
      },
    }),
  ],
  pages: {
    signIn: "/auth/login", // Custom sign-in page
  },
  session: {
    strategy: "jwt", // Use JWT to manage sessions
  },
  callbacks: {
    async jwt({ token, user }) {
      // If the user is authenticated, add the token to the session
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.token = user.token; // Add the JWT token from the authorize function
      }
      return token;
    },
    async session({ session, token }) {
      // Attach the user information from the token to the session
      if (token) {
        session.id = token.id;
        session.email = token.email;
        session.token = token.token; // Include the JWT token in the session
      }
      return session;
    },
  },
});
